name: CD-EM-RCC-InfraWorkflow

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [main]   
  pull_request:
    branches: [develop]
  workflow_dispatch:
    inputs:
      resource_path:
        description: 'Resource path (e.g., cloud-formation/rcc/a-crs-spa)'
        required: true
        type: string
      environment:
        description: 'Specific environment (leave empty for all)'
        required: false
        type: string

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    
    outputs:
      resource_paths: ${{ steps.detect-applications.outputs.paths }}
      specific_environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changed Applications
        id: detect-applications
        shell: bash
        run: |
          # Function to log messages with a timestamp
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          
          log "Starting change detection..."
          
          # For workflow_dispatch events
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            log "Workflow dispatch event detected."
            echo "paths=${{ github.event.inputs.resource_path }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          CHANGED_PATHS=()
          CHANGED_FILES=""
          
          # Determine event type and get changed files
          EVENT_NAME="${{ github.event_name }}"
          log "Event name: $EVENT_NAME"
          
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            log "Pull request event detected (PR #$PR_NUMBER)"
            
            CHANGED_FILES=$(curl -s -H "Authorization: token ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/files" | \
              jq -r '.[].filename')
            
          elif [[ "$EVENT_NAME" == "push" ]]; then
            log "Push event detected"
            
            PARENT_COUNT=$(git cat-file -p ${{ github.sha }} | grep -c "^parent ")
            
            if [[ $PARENT_COUNT -gt 1 ]]; then
              log "Merge commit detected with $PARENT_COUNT parents"
              
              MERGE_BASE=$(git merge-base ${{ github.event.before }} ${{ github.sha }})
              log "Merge base: $MERGE_BASE"
              
              CHANGED_FILES=$(git diff --name-only $MERGE_BASE ${{ github.sha }})
            else
              log "Regular push detected"
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
              
              if [[ -z "$CHANGED_FILES" ]]; then
                log "No files found with direct comparison, trying commit range..."
                CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
              fi
            fi
          else
            log "Event type: $EVENT_NAME (fallback)"
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          fi
          
          log "All changed files being considered:"
          echo "$CHANGED_FILES"
          
          log "Filtering for deployment config files..."
          
          while IFS= read -r file; do
            # Skip empty lines
            if [[ -z "$file" ]]; then
              continue
            fi
          
            # Check if the file is a deployment config file
            if [[ "$file" == cloud-formation/rcc/*deployment-config.y*ml ]]; then
              RESOURCE_PATH=$(dirname "$file")
              log "Match found! File: $file, Resource path: $RESOURCE_PATH"
          
              if [[ ! " ${CHANGED_PATHS[@]} " =~ " ${RESOURCE_PATH} " ]]; then
                CHANGED_PATHS+=("$RESOURCE_PATH")
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          log "Detected resource paths: ${CHANGED_PATHS[*]}"
          
          # Convert array to comma-separated string
          if [[ ${#CHANGED_PATHS[@]} -gt 0 ]]; then
            IFS=,
            PATHS="${CHANGED_PATHS[*]}"
          else
            PATHS=""
          fi
          
          log "Final paths output: '$PATHS'"
          echo "paths=$PATHS" >> $GITHUB_OUTPUT
          
          # Debug info for empty results
          if [[ -z "$PATHS" ]]; then
            log "No paths detected. Debug information:"
            log "Event name: $EVENT_NAME"
            log "Ref: ${{ github.ref }}"
            log "Base ref: ${{ github.event.pull_request.base.ref || 'N/A' }}"
            log "SHA: ${{ github.sha }}"
            log "Before: ${{ github.event.before || 'N/A' }}"
            log "After: ${{ github.event.after || 'N/A' }}"
          fi
          
          log "Change detection complete."
  prepare-matrices:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.resource_paths != '' }}
    runs-on: ubuntu-latest
    outputs:
      dev_matrix: ${{ steps.generate-matrices.outputs.dev_matrix }}
      int_matrix: ${{ steps.generate-matrices.outputs.int_matrix }}
      prod_matrix: ${{ steps.generate-matrices.outputs.prod_matrix }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate Combined Deployment Matrices
        id: generate-matrices
        uses: ./.github/actions/combined-matrix-generator
        with:
          resource_paths: ${{ needs.detect-changes.outputs.resource_paths }}
          specific_environment: ${{ needs.detect-changes.outputs.specific_environment }}

  deploy-dev:
    needs: prepare-matrices
    if: ${{ fromJSON(needs.prepare-matrices.outputs.dev_matrix).include[0] != null }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrices.outputs.dev_matrix) }}
      fail-fast: false
    environment: ${{ matrix.github_environment }}
    
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to DEV
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      
      - name: Deploy Stack
        uses: ./.github/actions/deploy-stack
        with:
          environment: ${{ matrix.environment }}
          stack-name: ${{ matrix.parameters.stack-name }}
          bucket-name: ${{ matrix.parameters.bucket-name }}
          upload-to-s3: ${{ matrix.parameters.bucket-upload }}
          target-folder: ${{ matrix.parameters.target-folder }}
          source-folder: ${{ matrix.parameters.source-folder }}
          template-name: ${{ matrix.parameters.template-name }}
          filename-patterns: ${{ matrix.parameters.filename-patterns }}
          cfnLintEnabled: ${{ matrix.parameters.cfnLintEnabled }}
          extraArgs: ${{ matrix.parameters.extraArgs }}          
          parameter-file: ${{ matrix.parameters.parameter-file }}
          inline-parameters: ${{ toJSON(matrix.parameters.inline-parameters) }}
          tags: ${{ matrix.parameters.tags }}
          aws-region: ${{ matrix.aws_region }}
          aws-role-to-assume: ${{ secrets[matrix.aws_role_secret] }}
          cfn-role-arn: ${{ secrets[matrix.cfn_role_secret] }}
          iam-execution-role-arn: ${{ secrets[matrix.iam_role_secret] }}

  deploy-int:
    needs: [prepare-matrices, deploy-dev]
    if: >-
      ${{ 
        fromJSON(needs.prepare-matrices.outputs.int_matrix).include[0] != null &&
        needs.detect-changes.outputs.is_pull_request == 'false'
      }}
    runs-on: custom
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrices.outputs.int_matrix) }}
      fail-fast: false
    environment: ${{ matrix.github_environment }}
    
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to INT
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      
      - name: Deploy Stack
        uses: ./.github/actions/deploy-stack
        with:
          environment: ${{ matrix.environment }}
          stack-name: ${{ matrix.parameters.stack-name }}
          bucket-name: ${{ matrix.parameters.bucket-name }}
          upload-to-s3: ${{ matrix.parameters.bucket-upload }}
          target-folder: ${{ matrix.parameters.target-folder }}
          source-folder: ${{ matrix.parameters.source-folder }}
          template-name: ${{ matrix.parameters.template-name }}
          filename-patterns: ${{ matrix.parameters.filename-patterns }}
          cfnLintEnabled: ${{ matrix.parameters.cfnLintEnabled }}
          extraArgs: ${{ matrix.parameters.extraArgs }}          
          parameter-file: ${{ matrix.parameters.parameter-file }}
          inline-parameters: ${{ toJSON(matrix.parameters.inline-parameters) }}
          tags: ${{ matrix.parameters.tags }}
          aws-region: ${{ matrix.aws_region }}
          aws-role-to-assume: ${{ secrets[matrix.aws_role_secre] }}
          cfn-role-arn: ${{ secrets.CFN_ROLE_ARN }}
          iam-execution-role-arn: ${{ secrets.IAM_EXECUTION_ROLE_ARN }}

  deploy-prod:
    needs: [prepare-matrices, deploy-int]
    if: >-
      ${{ 
        fromJSON(needs.prepare-matrices.outputs.prod_matrix).include[0] != null &&
        needs.detect-changes.outputs.is_pull_request == 'false' &&
        needs.detect-changes.outputs.is_main_branch == 'true'
      }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrices.outputs.prod_matrix) }}
      fail-fast: false
    environment: ${{ matrix.github_environment }}
    
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to PROD
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ matrix.aws_region }}
      
      - name: Deploy Stack
        uses: ./.github/actions/deploy-stack
        with:
          environment: ${{ matrix.environment }}
          stack-name: ${{ matrix.parameters.stack-name }}
          bucket-name: ${{ matrix.parameters.bucket-name }}
          upload-to-s3: ${{ matrix.parameters.bucket-upload }}
          target-folder: ${{ matrix.parameters.target-folder }}
          source-folder: ${{ matrix.parameters.source-folder }}
          template-name: ${{ matrix.parameters.template-name }}
          filename-patterns: ${{ matrix.parameters.filename-patterns }}
          cfnLintEnabled: ${{ matrix.parameters.cfnLintEnabled }}
          extraArgs: ${{ matrix.parameters.extraArgs }}          
          parameter-file: ${{ matrix.parameters.parameter-file }}
          inline-parameters: ${{ toJSON(matrix.parameters.inline-parameters) }}
          tags: ${{ matrix.parameters.tags }}
          aws-region: ${{ matrix.aws_region }}
          aws-role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          cfn-role-arn: ${{ secrets.CFN_ROLE_ARN }}
          iam-execution-role-arn: ${{ secrets.IAM_EXECUTION_ROLE_ARN }}
