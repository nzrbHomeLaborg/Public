name: Deploy Resource

permissions:
    id-token: write
    contents: read

on:
  workflow_call:
    inputs:
      resource_path:
        required: true
        type: string
        description: 'Path to the resource (e.g., Application1/a-nzrb-sns)'
      specific_environment:
        required: false
        type: string
        default: ''
        description: 'Specific environment to deploy (empty for all configured)'
    secrets:
      AWS_nzrb_ROLE_TO_ASSUME:
        description: 'AWS role to assume for S3 operations'
        required: false
      CFN_ROLE_ARN:
        description: 'CloudFormation role ARN'
        required: false
      IAM_EXECUTION_ROLE_ARN:
        description: 'IAM execution role ARN'
        required: false

jobs:
  prepare-matrices:
    runs-on: custom
    outputs:
      dev_matrix: ${{ steps.generate-matrices.outputs.dev_matrix }}
      int_matrix: ${{ steps.generate-matrices.outputs.int_matrix }}
      prod_matrix: ${{ steps.generate-matrices.outputs.prod_matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Generate deployment matrices
        id: generate-matrices
        run: |
          CONFIG_PATH="${{ inputs.resource_path }}/deployment-config.json"
          if [[ ! -f "$CONFIG_PATH" ]]; then
            echo "::error::Configuration file not found: $CONFIG_PATH"
            echo "dev_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "int_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "prod_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Read config file
          CONFIG_CONTENT=$(cat "$CONFIG_PATH")
          echo "Config content: $CONFIG_CONTENT"
          
          # Validate JSON structure
          echo "$CONFIG_CONTENT" | jq . > /dev/null 2>&1
          if [[ $? -ne 0 ]]; then
            echo "::error::Invalid JSON structure in config file"
            echo "dev_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "int_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "prod_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Parse parts from resource path
          if [[ "${{ inputs.resource_path }}" =~ ^([^/]+)/([^/]+)$ ]]; then
            APP="${BASH_REMATCH[1]}"
            RESOURCE="${BASH_REMATCH[2]}"
          else
            echo "::error::Invalid resource path format: ${{ inputs.resource_path }}"
            echo "dev_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "int_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "prod_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Try to get environments list
          ENVIRONMENTS=$(echo "$CONFIG_CONTENT" | jq -r '.deployments[0].environments[]' 2>/dev/null || echo "")
          if [[ -z "$ENVIRONMENTS" ]]; then
            echo "::error::No environments found in configuration"
            echo "dev_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "int_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "prod_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "Found environments: $ENVIRONMENTS"
          
          # Filter by specific environment if provided
          if [[ "${{ inputs.specific_environment }}" != "" ]]; then
            if echo "$ENVIRONMENTS" | grep -q "${{ inputs.specific_environment }}"; then
              ENVIRONMENTS="${{ inputs.specific_environment }}"
            else
              echo "::warning::Specified environment not found in configuration"
              echo "dev_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
              echo "int_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
              echo "prod_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # Setup separate matrices for each environment
          DEV_MATRIX_ITEMS=()
          INT_MATRIX_ITEMS=()
          PROD_MATRIX_ITEMS=()
          
          for ENV in $ENVIRONMENTS; do
            echo "Processing environment: $ENV"
            
            # Extract parameters as compact JSON (no newlines)
            PARAMS=$(echo "$CONFIG_CONTENT" | jq -c --arg env "$ENV" '.deployments[0].parameters[$env]')
            RUNNER=$(echo "$CONFIG_CONTENT" | jq -r --arg env "$ENV" '.deployments[0].runners[$env]')
            GH_ENV=$(echo "$CONFIG_CONTENT" | jq -r --arg env "$ENV" '.deployments[0].github_environments[$env]')
            AWS_REGION=$(echo "$CONFIG_CONTENT" | jq -r --arg env "$ENV" '.deployments[0].aws_regions[$env]')
            
            # Create matrix item (all on one line)
            MATRIX_ITEM="{\"application\":\"$APP\",\"resource\":\"$RESOURCE\",\"environment\":\"$ENV\",\"runner\":\"$RUNNER\",\"github_environment\":\"$GH_ENV\",\"aws_region\":\"$AWS_REGION\",\"aws_role_to_assume\":\"AWS_nzrb_ROLE_TO_ASSUME\",\"parameters\":$PARAMS}"
            
            # Add to appropriate matrix based on environment
            if [[ "$ENV" == "dev" ]]; then
              DEV_MATRIX_ITEMS+=("$MATRIX_ITEM")
            elif [[ "$ENV" == "int" ]]; then
              INT_MATRIX_ITEMS+=("$MATRIX_ITEM")
            elif [[ "$ENV" == "prod" ]]; then
              PROD_MATRIX_ITEMS+=("$MATRIX_ITEM")
            fi
          done
          
          # Construct environment-specific matrices
          DEV_MATRIX_JSON="{\"include\":[$(IFS=,; echo "${DEV_MATRIX_ITEMS[*]}")]}";
          INT_MATRIX_JSON="{\"include\":[$(IFS=,; echo "${INT_MATRIX_ITEMS[*]}")]}";
          PROD_MATRIX_JSON="{\"include\":[$(IFS=,; echo "${PROD_MATRIX_ITEMS[*]}")]}";
          
          # Verify JSON is valid
          echo "$DEV_MATRIX_JSON" | jq . > /dev/null 2>&1
          echo "$INT_MATRIX_JSON" | jq . > /dev/null 2>&1
          echo "$PROD_MATRIX_JSON" | jq . > /dev/null 2>&1
          
          # Write matrices to outputs
          echo "dev_matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$DEV_MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "int_matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$INT_MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "prod_matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$PROD_MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  
  deploy-dev:
    needs: prepare-matrices
    if: ${{ fromJSON(needs.prepare-matrices.outputs.dev_matrix).include[0] != null }}
    runs-on: custom
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrices.outputs.dev_matrix) }}
      fail-fast: false
    
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to DEV
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_nzrb_ROLE_TO_ASSUME }}
          aws-region: ${{ matrix.aws_region }}

      - name: Deploy Stack
        uses: ./.github/actions/composite
        with:
          environment: ${{ matrix.environment }}
          stack-name: ${{ matrix.parameters.stack-name }}
          bucket-name: ${{ matrix.parameters.bucket-name }}
          upload-to-s3: ${{ matrix.parameters.bucket-upload }}
          target-folder: ${{ matrix.parameters.target-folder }}
          source-folder: ${{ matrix.parameters.source-folder }}
          template-name: ${{ matrix.parameters.template-name }}
          parameter-file: ${{ matrix.parameters.parameter-file }}
          inline-parameters: ${{ toJSON(matrix.parameters.inline-parameters) }}
          tags: ${{ matrix.parameters.tags }}
          aws-region: ${{ matrix.aws_region }}
          aws-role-to-assume: ${{ secrets.AWS_nzrb_ROLE_TO_ASSUME }}
          cfn-role-arn: ${{ secrets.CFN_ROLE_ARN}}
          iam-execution-role-arn: ${{ secrets.AWS_nzrb_ROLE_TO_ASSUME }}

  deploy-int:
    needs: [prepare-matrices, deploy-dev]  # Requires deploy-dev to complete first
    if: ${{ fromJSON(needs.prepare-matrices.outputs.int_matrix).include[0] != null }}
    runs-on: custom
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrices.outputs.int_matrix) }}
      fail-fast: false
    
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to INT
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_nzrb_ROLE_TO_ASSUME }}
          aws-region: ${{ matrix.aws_region }}

      - name: Deploy Stack
        uses: ./.github/actions/composite
        with:
          environment: ${{ matrix.environment }}
          stack-name: ${{ matrix.parameters.stack-name }}
          bucket-name: ${{ matrix.parameters.bucket-name }}
          upload-to-s3: ${{ matrix.parameters.bucket-upload }}
          target-folder: ${{ matrix.parameters.target-folder }}
          source-folder: ${{ matrix.parameters.source-folder }}
          template-name: ${{ matrix.parameters.template-name }}
          parameter-file: ${{ matrix.parameters.parameter-file }}
          inline-parameters: ${{ toJSON(matrix.parameters.inline-parameters) }}
          tags: ${{ matrix.parameters.tags }}
          aws-region: ${{ matrix.aws_region }}
          aws-role-to-assume: ${{ secrets.AWS_nzrb_ROLE_TO_ASSUME }}
          cfn-role-arn: ${{ secrets.CFN_ROLE_ARN}}
          iam-execution-role-arn: ${{ secrets.AWS_nzrb_ROLE_TO_ASSUME }}

  deploy-prod:
    needs: [prepare-matrices, deploy-int]  # Requires deploy-int to complete first
    if: ${{ fromJSON(needs.prepare-matrices.outputs.prod_matrix).include[0] != null }}
    runs-on: custom
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrices.outputs.prod_matrix) }}
      fail-fast: false
    
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to PROD
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_nzrb_ROLE_TO_ASSUME }}
          aws-region: ${{ matrix.aws_region }}

      - name: Deploy Stack
        uses: ./.github/actions/composite
        with:
          environment: ${{ matrix.environment }}
          stack-name: ${{ matrix.parameters.stack-name }}
          bucket-name: ${{ matrix.parameters.bucket-name }}
          upload-to-s3: ${{ matrix.parameters.bucket-upload }}
          target-folder: ${{ matrix.parameters.target-folder }}
          source-folder: ${{ matrix.parameters.source-folder }}
          template-name: ${{ matrix.parameters.template-name }}
          parameter-file: ${{ matrix.parameters.parameter-file }}
          inline-parameters: ${{ toJSON(matrix.parameters.inline-parameters) }}
          tags: ${{ matrix.parameters.tags }}
          aws-region: ${{ matrix.aws_region }}
          aws-role-to-assume: ${{ secrets.AWS_nzrb_ROLE_TO_ASSUME }}
          cfn-role-arn: ${{ secrets.CFN_ROLE_ARN}}
          iam-execution-role-arn: ${{ secrets.AWS_nzrb_ROLE_TO_ASSUME }}