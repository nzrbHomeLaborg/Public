name: 'Detect Changed Applications'
description: 'Detects changes in application deployment configurations'
inputs:
  github_token:
    description: 'GitHub token for API access'
    required: true
  event_name:
    description: 'GitHub event name'
    required: true
  github_sha:
    description: 'The commit SHA that triggered the workflow'
    required: true
  github_ref:
    description: 'The branch or tag ref that triggered the workflow'
    required: true
  event_before:
    description: 'The SHA of the previous commit in a push event'
    required: false
    default: ''
  pull_request_number:
    description: 'Pull request number for PR events'
    required: false
    default: ''
  resource_path_input:
    description: 'Resource path provided via workflow_dispatch'
    required: false
    default: ''
  repository:
    description: 'GitHub repository'
    required: true

outputs:
  paths:
    description: 'Comma-separated list of detected resource paths'
    value: ${{ steps.detect-applications.outputs.paths }}

runs:
  using: "composite"
  steps:
    - name: Detect Changed Applications
      id: detect-applications
      shell: bash
      run: |
        # For workflow_dispatch events
        if [[ "${{ inputs.event_name }}" == "workflow_dispatch" ]]; then
          echo "paths=${{ inputs.resource_path_input }}" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        CHANGED_PATHS=()
        CHANGED_FILES=""
        
        # Get the base and head commits for comparison
        if [[ "${{ inputs.event_name }}" == "pull_request" ]]; then
          # For PR events, compare base to head
          PR_NUMBER="${{ inputs.pull_request_number }}"
          echo "Getting changed files for PR #$PR_NUMBER"
          
          CHANGED_FILES=$(curl -s -H "Authorization: token ${{ inputs.github_token }}" \
            "https://api.github.com/repos/${{ inputs.repository }}/pulls/$PR_NUMBER/files" | \
            jq -r '.[].filename')
        elif [[ "${{ inputs.event_name }}" == "push" ]]; then
          # For push events (including merges to main)
          echo "Push event detected"
          
          # Check if this is a merge commit by counting parents
          PARENT_COUNT=$(git cat-file -p ${{ inputs.github_sha }} | grep -c "^parent ")
          
          if [[ $PARENT_COUNT -gt 1 ]]; then
            echo "Merge commit detected with $PARENT_COUNT parents"
            
            # For merge commits, compare the merge base to the current commit
            # This finds all files that changed between the common ancestor and the current state
            MERGE_BASE=$(git merge-base ${{ inputs.event_before }} ${{ inputs.github_sha }})
            echo "Merge base is $MERGE_BASE"
            
            CHANGED_FILES=$(git diff --name-only $MERGE_BASE ${{ inputs.github_sha }})
          else
            # Normal push, get files changed in this commit
            echo "Regular push detected"
            CHANGED_FILES=$(git diff --name-only ${{ inputs.event_before }} ${{ inputs.github_sha }})
            
            # If no files found, try using the commit range
            if [[ -z "$CHANGED_FILES" ]]; then
              echo "No files found with direct comparison, trying commit range..."
              CHANGED_FILES=$(git diff --name-only ${{ inputs.event_before }}..${{ inputs.github_sha }})
            fi
          fi
        else
          # Fallback for other events
          echo "Event type: ${{ inputs.event_name }}"
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
        fi
        
        echo "All changed files being considered:"
        echo "$CHANGED_FILES"
        
        echo "Filtering for deployment config files..."
        while read -r file; do
          # Skip empty lines
          [[ -z "$file" ]] && continue
          
          # Check if the file is a deployment config file
          if [[ "$file" == cloud-formation/rcc/*deployment-config.y*ml ]]; then
            # Extract the resource path
            RESOURCE_PATH=$(dirname "$file")
            echo "  Match found! File: $file, Resource path: $RESOURCE_PATH"
            
            if [[ ! " ${CHANGED_PATHS[@]} " =~ " ${RESOURCE_PATH} " ]]; then
              CHANGED_PATHS+=("$RESOURCE_PATH")
            fi
          fi
        done <<< "$CHANGED_FILES"
        
        echo "Detected resource paths: ${CHANGED_PATHS[*]}"
        
        # Convert array to comma-separated string
        PATHS=$(IFS=,; echo "${CHANGED_PATHS[*]}")
        echo "Final paths output: '$PATHS'"
        echo "paths=$PATHS" >> $GITHUB_OUTPUT
        
        # Debug info for empty results
        if [[ -z "$PATHS" ]]; then
          echo "No paths detected. Here's some debug information:"
          echo "Event name: ${{ inputs.event_name }}"
          echo "Ref: ${{ inputs.github_ref }}"
          echo "SHA: ${{ inputs.github_sha }}"
          echo "Before: ${{ inputs.event_before || 'N/A' }}"
        fi