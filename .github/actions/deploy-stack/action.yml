name: 'Deploy CloudFormation Stack'
description: 'Deploys a CloudFormation stack with the specified parameters'
inputs:
  environment:
    description: 'Environment to deploy to (dev, int, prod)'
    required: true
  stack-name:
    description: 'Name of the CloudFormation stack'
    required: true
  bucket-name:
    description: 'S3 bucket for CloudFormation template storage'
    required: true
  bucket-upload:
    description: 'Whether to upload templates to S3'
    required: false
    default: 'true'
  target-folder:
    description: 'Target folder in S3 bucket'
    required: false
    default: ''
  source-folder:
    description: 'Source folder containing templates'
    required: true
  template-name:
    description: 'Name of the main CloudFormation template'
    required: true
  filename-patterns:
    description: 'File patterns to upload to S3'
    required: false
    default: '**/*.yaml'
  cfnLintEnabled:
    description: 'Whether to run CloudFormation linting'
    required: false
    default: 'true'
  extraArgs:
    description: 'Extra arguments for CloudFormation commands'
    required: false
    default: ''
  parameter-file:
    description: 'Path to parameter file'
    required: false
    default: ''
  inline-parameters:
    description: 'Inline parameters as JSON string'
    required: false
    default: '{}'
  tags:
    description: 'Tags to apply to the CloudFormation stack'
    required: false
    default: ''
  aws-region:
    description: 'AWS region for deployment'
    required: true
  aws-role-to-assume:
    description: 'AWS role to assume for operations'
    required: false
    default: ''
  cfn-role-arn:
    description: 'CloudFormation execution role ARN'
    required: false
    default: ''
  iam-execution-role-arn:
    description: 'IAM execution role ARN'
    required: false
    default: ''
  github-token:
    description: 'GitHub token for creating releases'
    required: true
  create-release:
    description: 'Whether to create a GitHub release after deployment'
    required: false
    default: 'false'
  release-tag:
    description: 'Tag name for the release'
    required: false
  release-name:
    description: 'Name of the release'
    required: false
  release-notes:
    description: 'Additional notes to include in the release description'
    required: false
  draft-release:
    description: 'Whether the release should be a draft'
    required: false
    default: 'false'
  prerelease:
    description: 'Whether the release should be marked as a pre-release'
    required: false
    default: 'false'




runs:
  using: "composite"
  steps:
    - name: Deploy CloudFormation Stack
      shell: bash
      run: |
        echo "Deploying stack to ${{ inputs.environment }} environment:"
        echo "  - Stack name: ${{ inputs.stack-name }}"
        echo "  - AWS Region: ${{ inputs.aws-region }}"
        echo "  - Template: ${{ inputs.source-folder }}/${{ inputs.template-name }}"
        
        # Process parameter file if provided
        PARAMETER_OVERRIDES=""
        if [[ -n "${{ inputs.parameter-file }}" && -f "${{ inputs.parameter-file }}" ]]; then
          echo "Using parameter file: ${{ inputs.parameter-file }}"
          # Don't echo the content to avoid exposing secrets
          PARAMETER_OVERRIDES="--parameter-overrides file://${{ inputs.parameter-file }}"
        fi
        
        # Process inline parameters if provided
        if [[ -n "${{ inputs.inline-parameters }}" && "${{ inputs.inline-parameters }}" != "{}" ]]; then
          echo "Using inline parameters (secrets redacted for security)"
          
          # Create a temporary file to hold our processed parameters
          INLINE_PARAMS_FILE=$(mktemp)
          PROCESSED_PARAMS_FILE=$(mktemp)
          
          # Write the inline parameters to the temporary file
          echo '${{ inputs.inline-parameters }}' > "$INLINE_PARAMS_FILE"
          
          # Check if we have secret mappings
          if jq -e 'has("secret_mapping")' "$INLINE_PARAMS_FILE" > /dev/null; then
            # Extract the inline parameters
            jq '.inline-parameters' "$INLINE_PARAMS_FILE" > "$PROCESSED_PARAMS_FILE"
            
            # Extract the secret mapping
            SECRET_MAP=$(jq '.secret_mapping' "$INLINE_PARAMS_FILE")
            
            # Process each parameter, replacing placeholders with actual secrets
            LENGTH=$(jq 'length' "$PROCESSED_PARAMS_FILE")
            for i in $(seq 0 $((LENGTH - 1))); do
              # Get parameter key and value
              PARAM_KEY=$(jq -r ".[$i].ParameterKey" "$PROCESSED_PARAMS_FILE")
              PARAM_VALUE=$(jq -r ".[$i].ParameterValue" "$PROCESSED_PARAMS_FILE")
              
              # Check if this is a placeholder for a secret
              if [[ "$PARAM_VALUE" == __SECRET_PLACEHOLDER__* ]]; then
                # Extract the parameter key from the placeholder
                PLACEHOLDER_KEY=${PARAM_VALUE#__SECRET_PLACEHOLDER__}
                
                # Get the secret name from our mapping
                SECRET_NAME=$(echo "$SECRET_MAP" | jq -r --arg key "$PLACEHOLDER_KEY" '.[$key]')
                
                if [[ -n "$SECRET_NAME" && "$SECRET_NAME" != "null" ]]; then
                  # Replace the placeholder with the actual secret value
                  # Dynamic secret resolution based on name
                  echo "Resolving secret: $SECRET_NAME"
                  
                  # Create a script that uses GitHub expressions to get the secret value
                  SECRET_SCRIPT=$(mktemp)
                  echo "#!/bin/bash" > "$SECRET_SCRIPT"
                  
                  # Add all possible secrets your workflow might need
                  # This is a workaround since we can't dynamically reference secrets in GitHub Actions
                  cat << 'EOT' >> "$SECRET_SCRIPT"
                  case "$1" in
                    "NZRB")
                      echo "${{ secrets.NZRB }}"
                      ;;
                    "AWS_ROLE_TO_ASSUME")
                      echo "${{ secrets.AWS_ROLE_TO_ASSUME }}"
                      ;;
                    "CFN_ROLE_ARN")
                      echo "${{ secrets.CFN_ROLE_ARN }}"
                      ;;
                    "IAM_EXECUTION_ROLE_ARN")
                      echo "${{ secrets.IAM_EXECUTION_ROLE_ARN }}"
                      ;;
                    "AWS_CRS_ROLE_TO_ASSUME")
                      echo "${{ secrets.AWS_CRS_ROLE_TO_ASSUME }}"
                      ;;
                    *)
                      echo "SECRET_NOT_FOUND"
                      ;;
                  esac
                  EOT
                  
                  # Make the script executable
                  chmod +x "$SECRET_SCRIPT"
                  
                  # Get the actual secret
                  ACTUAL_SECRET=$("$SECRET_SCRIPT" "$SECRET_NAME")
                  
                  # Clean up
                  rm "$SECRET_SCRIPT"
                  
                  # Check if we found the secret
                  if [[ "$ACTUAL_SECRET" == "SECRET_NOT_FOUND" ]]; then
                    echo "Warning: Unknown secret name: $SECRET_NAME"
                  fi
                  
                  # Update the parameter value in the processed parameters file
                  jq --arg i "$i" --arg value "$ACTUAL_SECRET" '.[$i|tonumber].ParameterValue = $value' "$PROCESSED_PARAMS_FILE" > "${PROCESSED_PARAMS_FILE}.tmp" && mv "${PROCESSED_PARAMS_FILE}.tmp" "$PROCESSED_PARAMS_FILE"
                fi
              fi
            done
            
            # Debug info without exposing secrets (just parameter keys)
            echo "Parameter keys: $(jq -r 'map(.ParameterKey) | join(", ")' "$PROCESSED_PARAMS_FILE")"
            
            # If we already have parameters from a file, we'll combine them
            if [[ -n "$PARAMETER_OVERRIDES" ]]; then
              PARAMETER_OVERRIDES="$PARAMETER_OVERRIDES --parameter-overrides $(jq -r 'map("\(.ParameterKey)=\(.ParameterValue)") | join(" ")' "$PROCESSED_PARAMS_FILE")"
            else
              PARAMETER_OVERRIDES="--parameter-overrides $(jq -r 'map("\(.ParameterKey)=\(.ParameterValue)") | join(" ")' "$PROCESSED_PARAMS_FILE")"
            fi
          else
            # No secret mappings, just process the inline parameters as is
            # Debug info without exposing secrets (just parameter keys)
            echo "Parameter keys: $(jq -r 'map(.ParameterKey) | join(", ")' "$INLINE_PARAMS_FILE")"
            
            # If we already have parameters from a file, we'll combine them
            if [[ -n "$PARAMETER_OVERRIDES" ]]; then
              PARAMETER_OVERRIDES="$PARAMETER_OVERRIDES --parameter-overrides $(jq -r 'map("\(.ParameterKey)=\(.ParameterValue)") | join(" ")' "$INLINE_PARAMS_FILE")"
            else
              PARAMETER_OVERRIDES="--parameter-overrides $(jq -r 'map("\(.ParameterKey)=\(.ParameterValue)") | join(" ")' "$INLINE_PARAMS_FILE")"
            fi
          fi
          
          # Clean up the temporary files
          rm "$INLINE_PARAMS_FILE" "$PROCESSED_PARAMS_FILE" 2>/dev/null || true
        fi
        
        # Call the actual deployment action
        # Note: This will use the AWS credentials configured in the job that calls this action
        
        # In an actual implementation, this would execute a command similar to:
        # aws cloudformation deploy \
        #   --template-file ${{ inputs.source-folder }}/${{ inputs.template-name }} \
        #   --stack-name ${{ inputs.stack-name }} \
        #   $PARAMETER_OVERRIDES \
        #   --tags ${{ inputs.tags }} \
        #   --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
        #   --role-arn ${{ inputs.cfn-role-arn }}
        
        # For now, we'll use the existing composite action
        echo "Calling cat-digital-platform/CD-GitHub-Actions/aws-cfn-lint-upload-create-update-composite"
        
        # For demonstration, we'll just echo the command parameters (without exposing secrets)
        echo "  - environment: ${{ inputs.environment }}"
        echo "  - stack-name: ${{ inputs.stack-name }}"
        echo "  - bucket-name: ${{ inputs.bucket-name }}"
        echo "  - upload-to-s3: ${{ inputs.bucket-upload }}"
        echo "  - target-folder: ${{ inputs.target-folder }}"
        echo "  - source-folder: ${{ inputs.source-folder }}"
        echo "  - template-name: ${{ inputs.template-name }}"
        echo "  - filename-patterns: ${{ inputs.filename-patterns }}"
        echo "  - cfnLintEnabled: ${{ inputs.cfnLintEnabled }}"
        echo "  - extraArgs: ${{ inputs.extraArgs }}"
        echo "  - tags: ${{ inputs.tags }}"
        echo "  - aws-region: ${{ inputs.aws-region }}"
        echo "  - parameter-overrides: $PARAMETER_OVERRIDES"
        # Don't echo sensitive values
        echo "  - aws-role-to-assume: [REDACTED]"
        echo "  - cfn-role-arn: [REDACTED]"
        echo "  - iam-execution-role-arn: [REDACTED]"


    - name: Create GitHub Release
      if: ${{ inputs.create-release == 'true' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ inputs.release-tag || github.sha }}
        release_name: ${{ inputs.release-name || 'CloudFormation Templates Release' }}
        body: |
          CloudFormation templates have been validated, uploaded to S3, and deployed successfully.
          
          Stack name: ${{ inputs.stack-name }}
          Region: ${{ inputs.aws-region }}
          ${{ inputs.release-notes }}
        draft: ${{ inputs.draft-release == 'true' }}
        prerelease: ${{ inputs.prerelease == 'true' }}


    - name: Create GitHub Release
      if: ${{ inputs.create-release == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ inputs.release-tag || format('v{0}', github.run_number) }}
        name: ${{ inputs.release-name || 'CloudFormation Templates Release' }}
        body: |
          CloudFormation templates have been validated, uploaded to S3, and deployed successfully.
          
          Stack name: ${{ inputs.stack-name }}
          Region: ${{ inputs.aws-region }}
          ${{ inputs.release-notes }}
        draft: ${{ inputs.draft-release == 'true' }}
        prerelease: ${{ inputs.prerelease == 'true' }}
        files: ${{ inputs.source-folder }}/${{ inputs.template-name }}
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload templates to release
      if: ${{ inputs.create-release == 'true' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.source-folder }}/${{ inputs.template-name }}
        asset_name: ${{ inputs.template-name }}
        asset_content_type: application/zip    
