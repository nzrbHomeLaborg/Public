name: Deploy CloudFormation Resource

on:
  workflow_call:
    inputs:
      matrix_json:
        required: true
        type: string
      environment_type:
        required: true
        type: string

jobs:
  deploy:
    strategy:
      matrix: ${{ fromJSON(inputs.matrix_json) }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    environment: ${{ matrix.github_environment }}
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to ${{ inputs.environment_type }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Process inline parameters here
      - name: Process parameters
        id: process-params
        run: |
          # Initialize default empty array
          PROCESSED_PARAMS='[]'
          
          # Check if inline parameters exist
          if [[ -n "${{ toJSON(matrix.parameters.inline-parameters) }}" && "${{ toJSON(matrix.parameters.inline-parameters) }}" != "null" && "${{ toJSON(matrix.parameters.inline-parameters) }}" != "{}" ]]; then
            INLINE_PARAMS='${{ toJSON(matrix.parameters.inline-parameters) }}'
            
            # Check if the format is valid JSON array
            if echo "$INLINE_PARAMS" | jq empty > /dev/null 2>&1; then
              echo "Valid inline parameters JSON found"
              
              # Set up environment variables for secrets
              if [[ -n "${{ toJSON(matrix.github_secrets) }}" && "${{ toJSON(matrix.github_secrets) }}" != "null" && "${{ toJSON(matrix.github_secrets) }}" != "{}" ]]; then
                echo "Setting up secrets..."
                for SECRET_KEY in $(echo '${{ toJSON(matrix.github_secrets) }}' | jq -r 'keys[]'); do
                  SECRET_NAME=$(echo '${{ toJSON(matrix.github_secrets) }}' | jq -r --arg key "$SECRET_KEY" '.[$key]')
                  # Create environment variable for each secret
                  if [[ "$SECRET_NAME" != "null" && -n "$SECRET_NAME" ]]; then
                    # Explicitly reference each secret by name since dynamic references don't work
                    case "$SECRET_NAME" in
                      "NZRB")
                        export SECRET_$SECRET_KEY="${{ secrets.NZRB }}"
                        ;;
                      "API_KEY_DEV")
                        export SECRET_$SECRET_KEY="${{ secrets.API_KEY_DEV }}"
                        ;;
                      # Add other secrets as needed
                      *)
                        echo "Warning: Unknown secret name: $SECRET_NAME"
                        ;;
                    esac
                  fi
                done
              fi
              
              # Process parameters to replace SECRET: placeholders
              PROCESSED_PARAMS=$(echo "$INLINE_PARAMS" | jq -c 'map(
                if .ParameterValue != null and (.ParameterValue | type) == "string" and (.ParameterValue | startswith("SECRET:")) then
                  .ParameterValue = (
                    "SECRET_" + (.ParameterValue | sub("SECRET:"; "")) | 
                    if env[.] != null then env[.] else .ParameterValue end
                  )
                else . end
              )')
            else
              echo "Warning: Invalid JSON in inline parameters, using empty array"
            fi
          else
            echo "No inline parameters found, using empty array"
          fi
          
          # Output the processed parameters
          echo "processed_params=${PROCESSED_PARAMS}" >> $GITHUB_OUTPUT
          
          # Log how many parameters were processed
          NUM_PARAMS=$(echo "$PROCESSED_PARAMS" | jq '. | length')
          echo "Processed $NUM_PARAMS parameters"
      
      # Main deployment step with proper defaults
      - name: Deploy Stack
        uses: ./.github/actions/composite
        with:
          environment: ${{ matrix.environment }}
          stack-name: ${{ matrix.parameters.stack-name }}
          bucket-name: ${{ matrix.parameters.bucket-name || '' }}
          upload-to-s3: ${{ matrix.parameters.bucket-upload || 'false' }}
          target-folder: ${{ matrix.parameters.target-folder || '' }}
          source-folder: ${{ matrix.parameters.source-folder || '' }}
          template-name: ${{ matrix.parameters.template-name || '' }}
          filename-patterns: ${{ matrix.parameters.filename-patterns || '*.yaml' }}
          cfnLintEnabled: ${{ matrix.parameters.cfnLintEnabled || 'false' }}
          extraArgs: ${{ matrix.parameters.extraArgs || '' }}
          parameter-file: ${{ matrix.parameters.parameter-file || '' }}
          inline-parameters: ${{ steps.process-params.outputs.processed_params }}
          tags: ${{ matrix.parameters.tags || '' }}
          aws-region: ${{ matrix.aws_region || 'us-east-1' }}
          aws-role-to-assume: ${{ secrets[matrix.aws_role_secret] }}
          cfn-role-arn: ${{ secrets[matrix.cfn_role_secret] }}
          iam-execution-role-arn: ${{ secrets[matrix.iam_role_secret] }}