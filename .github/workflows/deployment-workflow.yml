name: Deploy CloudFormation Resource

on:
  workflow_call:
    inputs:
      matrix_json:
        required: true
        type: string
      environment_type:
        required: true
        type: string

jobs:
  deploy:
    strategy:
      matrix: ${{ fromJSON(inputs.matrix_json) }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    environment: ${{ matrix.github_environment }}
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to ${{ inputs.environment_type }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Process inline parameters here
      - name: Process parameters
        id: process-params
        run: |
          INLINE_PARAMS='${{ toJSON(matrix.parameters.inline-parameters) }}'
          
          # Process each parameter
          PROCESSED_PARAMS=$(echo "$INLINE_PARAMS" | jq -c 'map(
            if .ParameterValue != null and (.ParameterValue | type) == "string" and (.ParameterValue | startswith("SECRET:")) then
              .ParameterValue = "some-value"  # Here we replace with actual secret
            else . end
          )')
          
          # Output the processed parameters
          echo "processed_params=$PROCESSED_PARAMS" >> $GITHUB_OUTPUT
      
      # Deploy using your composite action
      - name: Deploy Stack
        uses: ./.github/actions/composite
        with:
          environment: ${{ fromJSON(inputs.matrix_item).environment }}
          stack-name: ${{ fromJSON(inputs.matrix_item).parameters.stack-name }}
          bucket-name: ${{ fromJSON(inputs.matrix_item).parameters.bucket-name }}
          upload-to-s3: ${{ fromJSON(inputs.matrix_item).parameters.bucket-upload }}
          target-folder: ${{ fromJSON(inputs.matrix_item).parameters.target-folder }}
          source-folder: ${{ fromJSON(inputs.matrix_item).parameters.source-folder }}
          template-name: ${{ fromJSON(inputs.matrix_item).parameters.template-name }}
          filename-patterns: ${{ fromJSON(inputs.matrix_item).parameters.filename-patterns }}
          cfnLintEnabled: ${{ fromJSON(inputs.matrix_item).parameters.cfnLintEnabled }}
          extraArgs: ${{ fromJSON(inputs.matrix_item).parameters.extraArgs }}
          parameter-file: ${{ fromJSON(inputs.matrix_item).parameters.parameter-file }}
          inline-parameters: ${{ steps.process-params.outputs.processed_inline_parameters }}
          tags: ${{ fromJSON(inputs.matrix_item).parameters.tags }}
          aws-region: ${{ fromJSON(inputs.matrix_item).aws_region }}
          aws-role-to-assume: ${{ secrets[fromJSON(inputs.matrix_item).aws_role_secret] }}
          cfn-role-arn: ${{ secrets[fromJSON(inputs.matrix_item).cfn_role_secret] }}
          iam-execution-role-arn: ${{ secrets[fromJSON(inputs.matrix_item).iam_role_secret] }}