name: 'Generate Deployment Matrices'
description: 'Parses deployment config files and generates matrices for deployment'
inputs:
  resource_path:
    description: 'Path to the resource (e.g., Application1/a-CRS-sns)'
    required: true
  specific_environment:
    description: 'Specific environment to deploy (empty for all configured)'
    required: false
    default: ''

outputs:
  dev_matrix:
    description: 'Matrix for DEV deployments'
    value: ${{ steps.generate-matrices.outputs.dev_matrix }}
  int_matrix:
    description: 'Matrix for INT deployments'
    value: ${{ steps.generate-matrices.outputs.int_matrix }}
  prod_matrix:
    description: 'Matrix for PROD deployments'
    value: ${{ steps.generate-matrices.outputs.prod_matrix }}

runs:
  using: "composite"
  steps:
    - name: Install yq
      shell: bash
      run: |
        if ! command -v yq &> /dev/null; then
          echo "Installing yq..."
          VERSION=v4.30.8
          BINARY=yq_linux_amd64
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | \
            tar xz
          chmod +x ${BINARY}
          sudo mv ${BINARY} /usr/bin/yq || mkdir -p $HOME/bin && mv ${BINARY} $HOME/bin/yq && echo "$HOME/bin" >> $GITHUB_PATH
        fi

    - name: Generate deployment matrices
      id: generate-matrices
      shell: bash
      run: |
        CONFIG_PATH="${{ inputs.resource_path }}/deployment-config.yaml"
        if [[ ! -f "$CONFIG_PATH" ]]; then
          # Try YML extension as fallback
          CONFIG_PATH="${{ inputs.resource_path }}/deployment-config.yml"
          if [[ ! -f "$CONFIG_PATH" ]]; then
            echo "::error::Configuration file not found: ${{ inputs.resource_path }}/deployment-config.yaml or .yml"
            echo "dev_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "int_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "prod_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 1
          fi
        fi

        # Read YAML config file and convert to JSON for processing
        echo "Reading YAML configuration from $CONFIG_PATH"
        CONFIG_CONTENT=$(yq -o=json eval . "$CONFIG_PATH")
        echo "Config content (converted to JSON): $CONFIG_CONTENT"
        
        # Extract app and resource from path
        RESOURCE_PATH="${{ inputs.resource_path }}"
        APP=$(dirname "$RESOURCE_PATH")
        RESOURCE=$(basename "$RESOURCE_PATH")
        
        echo "Using APP=$APP and RESOURCE=$RESOURCE"
        
        # Validate JSON structure
        echo "$CONFIG_CONTENT" | jq . > /dev/null 2>&1
        if [[ $? -ne 0 ]]; then
          echo "::error::Invalid YAML structure in config file"
          echo "dev_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          echo "int_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          echo "prod_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Get environments list
        ENVIRONMENTS=$(echo "$CONFIG_CONTENT" | jq -r '.deployments[0].environments[]' 2>/dev/null || echo "")
        if [[ -z "$ENVIRONMENTS" ]]; then
          echo "::error::No environments found in configuration"
          echo "dev_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          echo "int_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          echo "prod_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "Found environments: $ENVIRONMENTS"

        # Filter by specific environment if provided
        if [[ "${{ inputs.specific_environment }}" != "" ]]; then
          if echo "$ENVIRONMENTS" | grep -q "${{ inputs.specific_environment }}"; then
            ENVIRONMENTS="${{ inputs.specific_environment }}"
          else
            echo "::warning::Specified environment not found in configuration"
            echo "dev_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "int_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "prod_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi
        
        # Initialize matrix items arrays
        DEV_MATRIX_ITEMS=()
        INT_MATRIX_ITEMS=()
        PROD_MATRIX_ITEMS=()
        
        for ENV in $ENVIRONMENTS; do
          echo "Processing environment: $ENV"
          
          # Extract parameters as compact JSON (no newlines)
          PARAMS=$(echo "$CONFIG_CONTENT" | jq -c --arg env "$ENV" '.deployments[0].parameters[$env]')
          RUNNER=$(echo "$CONFIG_CONTENT" | jq -r --arg env "$ENV" '.deployments[0].runners[$env]')
          GH_ENV=$(echo "$CONFIG_CONTENT" | jq -r --arg env "$ENV" '.deployments[0].github_environments[$env]')
          AWS_REGION=$(echo "$CONFIG_CONTENT" | jq -r --arg env "$ENV" '.deployments[0].aws_regions[$env]')

          # Create matrix item (all on one line)
          MATRIX_ITEM="{\"application\":\"$APP\",\"resource\":\"$RESOURCE\",\"environment\":\"$ENV\",\"runner\":\"$RUNNER\",\"github_environment\":\"$GH_ENV\",\"aws_region\":\"$AWS_REGION\",\"parameters\":$PARAMS}"
    
          # Add to appropriate matrix based on environment
          if [[ "$ENV" == "dev" ]]; then
            DEV_MATRIX_ITEMS+=("$MATRIX_ITEM")
          elif [[ "$ENV" == "int" ]]; then
            INT_MATRIX_ITEMS+=("$MATRIX_ITEM")
          elif [[ "$ENV" == "prod" ]]; then
            PROD_MATRIX_ITEMS+=("$MATRIX_ITEM")
          fi
        done
        
        # Construct environment-specific matrices
        DEV_MATRIX_JSON="{\"include\":[$(IFS=,; echo "${DEV_MATRIX_ITEMS[*]}")]}";
        INT_MATRIX_JSON="{\"include\":[$(IFS=,; echo "${INT_MATRIX_ITEMS[*]}")]}";
        PROD_MATRIX_JSON="{\"include\":[$(IFS=,; echo "${PROD_MATRIX_ITEMS[*]}")]}";
        
        # Verify JSON is valid
        echo "$DEV_MATRIX_JSON" | jq . > /dev/null 2>&1
        echo "$INT_MATRIX_JSON" | jq . > /dev/null 2>&1
        echo "$PROD_MATRIX_JSON" | jq . > /dev/null 2>&1
        
        # Write matrices to outputs
        echo "dev_matrix<<EOF" >> $GITHUB_OUTPUT
        echo "$DEV_MATRIX_JSON" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "int_matrix<<EOF" >> $GITHUB_OUTPUT
        echo "$INT_MATRIX_JSON" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "prod_matrix<<EOF" >> $GITHUB_OUTPUT
        echo "$PROD_MATRIX_JSON" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT