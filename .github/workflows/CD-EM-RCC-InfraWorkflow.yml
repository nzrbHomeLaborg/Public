name: CD-EM-RCC-InfraWorkflow

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [main]
    paths:
      - 'cloud-formation/rcc/**/deployment-config.yaml'
      - 'cloud-formation/rcc/**/deployment-config.yml'    
  pull_request:
    branches: [main]
    paths:
      - 'cloud-formation/rcc/**/deployment-config.yaml'
      - 'cloud-formation/rcc/**/deployment-config.yml'
  workflow_dispatch:
    inputs:
      resource_path:
        description: 'Resource path (e.g., cloud-formation/rcc/a-crs-spa)'
        required: true
        type: string
      environment:
        description: 'Specific environment (leave empty for all)'
        required: false
        type: string

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    
    outputs:
      resource_paths: ${{ steps.detect-applications.outputs.paths }}
      specific_environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changed Applications
        id: detect-applications
        shell: bash
        run: |
          # For manual workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "paths=${{ github.event.inputs.resource_path }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For push and pull request events
          CHANGED_PATHS=()
          
          # Get changed files
          if [[ "${{ github.event_name }}" == "push" ]]; then
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 || echo "")
          fi
          
          echo "All changed files:"
          echo "$CHANGED_FILES"
          
          # Filter for deployment config files
          echo "Filtering for deployment config files..."
          while read -r file; do
            # Check if the file is a deployment config file (simpler regex)
            if [[ "$file" == cloud-formation/rcc/*deployment-config.y*ml ]]; then
              # Extract the resource path (everything up to the folder containing the deployment-config)
              RESOURCE_PATH=$(dirname "$file")
              echo "  Match found! File: $file, Resource path: $RESOURCE_PATH"
              
              if [[ ! " ${CHANGED_PATHS[@]} " =~ " ${RESOURCE_PATH} " ]]; then
                CHANGED_PATHS+=("$RESOURCE_PATH")
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          echo "Detected resource paths: ${CHANGED_PATHS[*]}"
          
          # Convert array to comma-separated string
          PATHS=$(IFS=,; echo "${CHANGED_PATHS[*]}")
          echo "Final paths output: '$PATHS'"
          echo "paths=$PATHS" >> $GITHUB_OUTPUT

      - name: Check Event Type and Branch
        id: check-event
        shell: bash
        run: |
          # Check if this is a pull request event
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "is_pull_request=true" >> $GITHUB_OUTPUT
          else
            echo "is_pull_request=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if this is on the main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.resource_path }}" != "" ]]; then
            echo "is_main_branch=true" >> $GITHUB_OUTPUT
          else
            echo "is_main_branch=false" >> $GITHUB_OUTPUT
          fi
  prepare-matrices:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.resource_paths != '' }}
    runs-on: ubuntu-latest
    outputs:
      dev_matrix: ${{ steps.generate-matrices.outputs.dev_matrix }}
      int_matrix: ${{ steps.generate-matrices.outputs.int_matrix }}
      prod_matrix: ${{ steps.generate-matrices.outputs.prod_matrix }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate Combined Deployment Matrices
        id: generate-matrices
        uses: ./.github/actions/combined-matrix-generator
        with:
          resource_paths: ${{ needs.detect-changes.outputs.resource_paths }}
          specific_environment: ${{ needs.detect-changes.outputs.specific_environment }}

  deploy-dev:
    needs: prepare-matrices
    if: ${{ fromJSON(needs.prepare-matrices.outputs.dev_matrix).include[0] != null }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrices.outputs.dev_matrix) }}
      fail-fast: false
    environment: ${{ matrix.github_environment }}
    
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to DEV
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      
      - name: Deploy Stack
        uses: ./.github/actions/deploy-stack
        with:
          environment: ${{ matrix.environment }}
          stack-name: ${{ matrix.parameters.stack-name }}
          bucket-name: ${{ matrix.parameters.bucket-name }}
          upload-to-s3: ${{ matrix.parameters.bucket-upload }}
          target-folder: ${{ matrix.parameters.target-folder }}
          source-folder: ${{ matrix.parameters.source-folder }}
          template-name: ${{ matrix.parameters.template-name }}
          filename-patterns: ${{ matrix.parameters.filename-patterns }}
          cfnLintEnabled: ${{ matrix.parameters.cfnLintEnabled }}
          extraArgs: ${{ matrix.parameters.extraArgs }}          
          parameter-file: ${{ matrix.parameters.parameter-file }}
          inline-parameters: ${{ toJSON(matrix.parameters.inline-parameters) }}
          tags: ${{ matrix.parameters.tags }}
          aws-region: ${{ matrix.aws_region }}
          aws-role-to-assume: ${{ secrets[matrix.aws_role_secret] }}
          cfn-role-arn: ${{ secrets[matrix.cfn_role_secret] }}
          iam-execution-role-arn: ${{ secrets[matrix.iam_role_secret] }}

  deploy-int:
    needs: [prepare-matrices, deploy-dev]
    if: >-
      ${{ 
        fromJSON(needs.prepare-matrices.outputs.int_matrix).include[0] != null &&
        needs.detect-changes.outputs.is_pull_request == 'false'
      }}
    runs-on: custom
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrices.outputs.int_matrix) }}
      fail-fast: false
    environment: ${{ matrix.github_environment }}
    
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to INT
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      
      - name: Deploy Stack
        uses: ./.github/actions/deploy-stack
        with:
          environment: ${{ matrix.environment }}
          stack-name: ${{ matrix.parameters.stack-name }}
          bucket-name: ${{ matrix.parameters.bucket-name }}
          upload-to-s3: ${{ matrix.parameters.bucket-upload }}
          target-folder: ${{ matrix.parameters.target-folder }}
          source-folder: ${{ matrix.parameters.source-folder }}
          template-name: ${{ matrix.parameters.template-name }}
          filename-patterns: ${{ matrix.parameters.filename-patterns }}
          cfnLintEnabled: ${{ matrix.parameters.cfnLintEnabled }}
          extraArgs: ${{ matrix.parameters.extraArgs }}          
          parameter-file: ${{ matrix.parameters.parameter-file }}
          inline-parameters: ${{ toJSON(matrix.parameters.inline-parameters) }}
          tags: ${{ matrix.parameters.tags }}
          aws-region: ${{ matrix.aws_region }}
          aws-role-to-assume: ${{ secrets[matrix.aws_role_secre] }}
          cfn-role-arn: ${{ secrets.CFN_ROLE_ARN }}
          iam-execution-role-arn: ${{ secrets.IAM_EXECUTION_ROLE_ARN }}

  deploy-prod:
    needs: [prepare-matrices, deploy-int]
    if: >-
      ${{ 
        fromJSON(needs.prepare-matrices.outputs.prod_matrix).include[0] != null &&
        needs.detect-changes.outputs.is_pull_request == 'false' &&
        needs.detect-changes.outputs.is_main_branch == 'true'
      }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare-matrices.outputs.prod_matrix) }}
      fail-fast: false
    environment: ${{ matrix.github_environment }}
    
    name: Deploy ${{ matrix.application }}-${{ matrix.resource }} to PROD
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ matrix.aws_region }}
      
      - name: Deploy Stack
        uses: ./.github/actions/deploy-stack
        with:
          environment: ${{ matrix.environment }}
          stack-name: ${{ matrix.parameters.stack-name }}
          bucket-name: ${{ matrix.parameters.bucket-name }}
          upload-to-s3: ${{ matrix.parameters.bucket-upload }}
          target-folder: ${{ matrix.parameters.target-folder }}
          source-folder: ${{ matrix.parameters.source-folder }}
          template-name: ${{ matrix.parameters.template-name }}
          filename-patterns: ${{ matrix.parameters.filename-patterns }}
          cfnLintEnabled: ${{ matrix.parameters.cfnLintEnabled }}
          extraArgs: ${{ matrix.parameters.extraArgs }}          
          parameter-file: ${{ matrix.parameters.parameter-file }}
          inline-parameters: ${{ toJSON(matrix.parameters.inline-parameters) }}
          tags: ${{ matrix.parameters.tags }}
          aws-region: ${{ matrix.aws_region }}
          aws-role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          cfn-role-arn: ${{ secrets.CFN_ROLE_ARN }}
          iam-execution-role-arn: ${{ secrets.IAM_EXECUTION_ROLE_ARN }}